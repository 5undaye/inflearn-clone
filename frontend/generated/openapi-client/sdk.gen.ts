// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, formDataBodySerializer } from './client';
import type { AppControllerGetHelloData, AppControllerGetHelloResponses, AppControllerTestUserData, AppControllerTestUserResponses, CoursesControllerCreateData, CoursesControllerCreateResponses, CoursesControllerFindAllInstructorCoursesData, CoursesControllerFindAllInstructorCoursesResponses, CoursesControllerFindAllMyCoursesData, CoursesControllerFindAllMyCoursesResponses, CoursesControllerDeleteData, CoursesControllerDeleteResponses, CoursesControllerFindOneData, CoursesControllerFindOneResponses, CoursesControllerUpdateData, CoursesControllerUpdateResponses, CoursesControllerSearchData, CoursesControllerSearchResponses, CoursesControllerRemoveFavoriteData, CoursesControllerRemoveFavoriteResponses, CoursesControllerGetFavoriteData, CoursesControllerGetFavoriteResponses, CoursesControllerAddFavoriteData, CoursesControllerAddFavoriteResponses, CoursesControllerGetMyFavoritesData, CoursesControllerGetMyFavoritesResponses, CoursesControllerEnrollCourseData, CoursesControllerEnrollCourseResponses, CoursesControllerGetLectureActivityData, CoursesControllerGetLectureActivityResponses, CoursesControllerGetCourseReviewsData, CoursesControllerGetCourseReviewsResponses, CoursesControllerCreateReviewData, CoursesControllerCreateReviewResponses, CoursesControllerDeleteReviewData, CoursesControllerDeleteReviewResponses, CoursesControllerUpdateReviewData, CoursesControllerUpdateReviewResponses, CoursesControllerCreateInstructorReplyData, CoursesControllerCreateInstructorReplyResponses, CoursesControllerGetInstructorReviewsData, CoursesControllerGetInstructorReviewsResponses, LecturesControllerCreateData, LecturesControllerCreateResponses, LecturesControllerDeleteData, LecturesControllerDeleteResponses, LecturesControllerFindOneData, LecturesControllerFindOneResponses, LecturesControllerUpdateData, LecturesControllerUpdateResponses, LecturesControllerGetLectureActivityData, LecturesControllerGetLectureActivityResponses, LecturesControllerUpdateLectureActivityData, LecturesControllerUpdateLectureActivityResponses, SectionsControllerCreateData, SectionsControllerCreateResponses, SectionsControllerDeleteData, SectionsControllerDeleteResponses, SectionsControllerFindOneData, SectionsControllerFindOneResponses, SectionsControllerUpdateData, SectionsControllerUpdateResponses, CategoriesControllerFindAllData, CategoriesControllerFindAllResponses, MediaControllerUploadMediaData, MediaControllerUploadMediaResponses, UsersControllerGetProfileData, UsersControllerGetProfileResponses, UsersControllerUpdateProfileData, UsersControllerUpdateProfileResponses, CommentsControllerCreateData, CommentsControllerCreateResponses, CommentsControllerRemoveData, CommentsControllerRemoveResponses, CommentsControllerUpdateData, CommentsControllerUpdateResponses, QuestionsControllerFindAllByInstructorIdData, QuestionsControllerFindAllByInstructorIdResponses, QuestionsControllerFindAllData, QuestionsControllerFindAllResponses, QuestionsControllerCreateData, QuestionsControllerCreateResponses, QuestionsControllerRemoveData, QuestionsControllerRemoveResponses, QuestionsControllerFindOneData, QuestionsControllerFindOneResponses, QuestionsControllerUpdateData, QuestionsControllerUpdateResponses, CartsControllerClearCartData, CartsControllerClearCartResponses, CartsControllerGetCartItemsData, CartsControllerGetCartItemsResponses, CartsControllerAddToCartData, CartsControllerAddToCartResponses, CartsControllerRemoveFromCartData, CartsControllerRemoveFromCartResponses, PaymentsControllerVerifyPaymentData, PaymentsControllerVerifyPaymentResponses, PaymentsControllerHandleWebhookData, PaymentsControllerHandleWebhookResponses } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const appControllerGetHello = <ThrowOnError extends boolean = false>(options?: Options<AppControllerGetHelloData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AppControllerGetHelloResponses, unknown, ThrowOnError>({
        url: '/',
        ...options
    });
};

export const appControllerTestUser = <ThrowOnError extends boolean = false>(options?: Options<AppControllerTestUserData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AppControllerTestUserResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/user-test',
        ...options
    });
};

export const coursesControllerCreate = <ThrowOnError extends boolean = false>(options: Options<CoursesControllerCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CoursesControllerCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/courses',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const coursesControllerFindAllInstructorCourses = <ThrowOnError extends boolean = false>(options?: Options<CoursesControllerFindAllInstructorCoursesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<CoursesControllerFindAllInstructorCoursesResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/courses/instructor',
        ...options
    });
};

export const coursesControllerFindAllMyCourses = <ThrowOnError extends boolean = false>(options?: Options<CoursesControllerFindAllMyCoursesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<CoursesControllerFindAllMyCoursesResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/courses/my',
        ...options
    });
};

export const coursesControllerDelete = <ThrowOnError extends boolean = false>(options: Options<CoursesControllerDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<CoursesControllerDeleteResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/courses/{id}',
        ...options
    });
};

export const coursesControllerFindOne = <ThrowOnError extends boolean = false>(options: Options<CoursesControllerFindOneData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CoursesControllerFindOneResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/courses/{id}',
        ...options
    });
};

export const coursesControllerUpdate = <ThrowOnError extends boolean = false>(options: Options<CoursesControllerUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<CoursesControllerUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/courses/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const coursesControllerSearch = <ThrowOnError extends boolean = false>(options: Options<CoursesControllerSearchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CoursesControllerSearchResponses, unknown, ThrowOnError>({
        url: '/courses/search',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const coursesControllerRemoveFavorite = <ThrowOnError extends boolean = false>(options: Options<CoursesControllerRemoveFavoriteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<CoursesControllerRemoveFavoriteResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/courses/{id}/favorite',
        ...options
    });
};

export const coursesControllerGetFavorite = <ThrowOnError extends boolean = false>(options: Options<CoursesControllerGetFavoriteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CoursesControllerGetFavoriteResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/courses/{id}/favorite',
        ...options
    });
};

export const coursesControllerAddFavorite = <ThrowOnError extends boolean = false>(options: Options<CoursesControllerAddFavoriteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CoursesControllerAddFavoriteResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/courses/{id}/favorite',
        ...options
    });
};

export const coursesControllerGetMyFavorites = <ThrowOnError extends boolean = false>(options?: Options<CoursesControllerGetMyFavoritesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<CoursesControllerGetMyFavoritesResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/courses/favorites/my',
        ...options
    });
};

export const coursesControllerEnrollCourse = <ThrowOnError extends boolean = false>(options: Options<CoursesControllerEnrollCourseData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CoursesControllerEnrollCourseResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/courses/{id}/enroll',
        ...options
    });
};

export const coursesControllerGetLectureActivity = <ThrowOnError extends boolean = false>(options: Options<CoursesControllerGetLectureActivityData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CoursesControllerGetLectureActivityResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/courses/{courseId}/activity',
        ...options
    });
};

export const coursesControllerGetCourseReviews = <ThrowOnError extends boolean = false>(options: Options<CoursesControllerGetCourseReviewsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CoursesControllerGetCourseReviewsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/courses/{courseId}/reviews',
        ...options
    });
};

export const coursesControllerCreateReview = <ThrowOnError extends boolean = false>(options: Options<CoursesControllerCreateReviewData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CoursesControllerCreateReviewResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/courses/{courseId}/reviews',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const coursesControllerDeleteReview = <ThrowOnError extends boolean = false>(options: Options<CoursesControllerDeleteReviewData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<CoursesControllerDeleteReviewResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/courses/reviews/{reviewId}',
        ...options
    });
};

export const coursesControllerUpdateReview = <ThrowOnError extends boolean = false>(options: Options<CoursesControllerUpdateReviewData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<CoursesControllerUpdateReviewResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/courses/reviews/{reviewId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const coursesControllerCreateInstructorReply = <ThrowOnError extends boolean = false>(options: Options<CoursesControllerCreateInstructorReplyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<CoursesControllerCreateInstructorReplyResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/courses/reviews/{reviewId}/instructor-reply',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const coursesControllerGetInstructorReviews = <ThrowOnError extends boolean = false>(options?: Options<CoursesControllerGetInstructorReviewsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<CoursesControllerGetInstructorReviewsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/courses/reviews/instructor',
        ...options
    });
};

/**
 * 새 강의 생성
 */
export const lecturesControllerCreate = <ThrowOnError extends boolean = false>(options: Options<LecturesControllerCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<LecturesControllerCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/lectures/sections/{sectionId}/lectures',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * 개별 강의 삭제
 */
export const lecturesControllerDelete = <ThrowOnError extends boolean = false>(options: Options<LecturesControllerDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<LecturesControllerDeleteResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/lectures/{lectureId}',
        ...options
    });
};

/**
 * 개별 강의 상세 정보
 */
export const lecturesControllerFindOne = <ThrowOnError extends boolean = false>(options: Options<LecturesControllerFindOneData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<LecturesControllerFindOneResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/lectures/{lectureId}',
        ...options
    });
};

/**
 * 개별 강의 수정
 */
export const lecturesControllerUpdate = <ThrowOnError extends boolean = false>(options: Options<LecturesControllerUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<LecturesControllerUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/lectures/{lectureId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const lecturesControllerGetLectureActivity = <ThrowOnError extends boolean = false>(options: Options<LecturesControllerGetLectureActivityData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<LecturesControllerGetLectureActivityResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/lectures/{lectureId}/activity',
        ...options
    });
};

export const lecturesControllerUpdateLectureActivity = <ThrowOnError extends boolean = false>(options: Options<LecturesControllerUpdateLectureActivityData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<LecturesControllerUpdateLectureActivityResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/lectures/{lectureId}/activity',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * 새 섹션 생성
 */
export const sectionsControllerCreate = <ThrowOnError extends boolean = false>(options: Options<SectionsControllerCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SectionsControllerCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/sections/courses/{courseId}/sections',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * 섹션 삭제
 */
export const sectionsControllerDelete = <ThrowOnError extends boolean = false>(options: Options<SectionsControllerDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<SectionsControllerDeleteResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/sections/{sectionId}',
        ...options
    });
};

/**
 * 섹션 상세 정보
 */
export const sectionsControllerFindOne = <ThrowOnError extends boolean = false>(options: Options<SectionsControllerFindOneData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SectionsControllerFindOneResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/sections/{sectionId}',
        ...options
    });
};

/**
 * 섹션 업데이트
 */
export const sectionsControllerUpdate = <ThrowOnError extends boolean = false>(options: Options<SectionsControllerUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<SectionsControllerUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/sections/{sectionId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * 카테고리 리스트
 */
export const categoriesControllerFindAll = <ThrowOnError extends boolean = false>(options?: Options<CategoriesControllerFindAllData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<CategoriesControllerFindAllResponses, unknown, ThrowOnError>({
        url: '/categories',
        ...options
    });
};

export const mediaControllerUploadMedia = <ThrowOnError extends boolean = false>(options: Options<MediaControllerUploadMediaData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MediaControllerUploadMediaResponses, unknown, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/media',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

export const usersControllerGetProfile = <ThrowOnError extends boolean = false>(options?: Options<UsersControllerGetProfileData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UsersControllerGetProfileResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/profile',
        ...options
    });
};

export const usersControllerUpdateProfile = <ThrowOnError extends boolean = false>(options: Options<UsersControllerUpdateProfileData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UsersControllerUpdateProfileResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/profile',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const commentsControllerCreate = <ThrowOnError extends boolean = false>(options: Options<CommentsControllerCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CommentsControllerCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/comments/questions/{questionId}/comments',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const commentsControllerRemove = <ThrowOnError extends boolean = false>(options: Options<CommentsControllerRemoveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<CommentsControllerRemoveResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/comments/comments/{commentId}',
        ...options
    });
};

export const commentsControllerUpdate = <ThrowOnError extends boolean = false>(options: Options<CommentsControllerUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<CommentsControllerUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/comments/comments/{commentId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const questionsControllerFindAllByInstructorId = <ThrowOnError extends boolean = false>(options?: Options<QuestionsControllerFindAllByInstructorIdData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<QuestionsControllerFindAllByInstructorIdResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/instructor/questions',
        ...options
    });
};

export const questionsControllerFindAll = <ThrowOnError extends boolean = false>(options: Options<QuestionsControllerFindAllData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<QuestionsControllerFindAllResponses, unknown, ThrowOnError>({
        url: '/courses/{courseId}/questions',
        ...options
    });
};

export const questionsControllerCreate = <ThrowOnError extends boolean = false>(options: Options<QuestionsControllerCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<QuestionsControllerCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/courses/{courseId}/questions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const questionsControllerRemove = <ThrowOnError extends boolean = false>(options: Options<QuestionsControllerRemoveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<QuestionsControllerRemoveResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/questions/{questionId}',
        ...options
    });
};

export const questionsControllerFindOne = <ThrowOnError extends boolean = false>(options: Options<QuestionsControllerFindOneData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<QuestionsControllerFindOneResponses, unknown, ThrowOnError>({
        url: '/questions/{questionId}',
        ...options
    });
};

export const questionsControllerUpdate = <ThrowOnError extends boolean = false>(options: Options<QuestionsControllerUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<QuestionsControllerUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/questions/{questionId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const cartsControllerClearCart = <ThrowOnError extends boolean = false>(options?: Options<CartsControllerClearCartData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<CartsControllerClearCartResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/carts',
        ...options
    });
};

export const cartsControllerGetCartItems = <ThrowOnError extends boolean = false>(options?: Options<CartsControllerGetCartItemsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<CartsControllerGetCartItemsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/carts',
        ...options
    });
};

export const cartsControllerAddToCart = <ThrowOnError extends boolean = false>(options: Options<CartsControllerAddToCartData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CartsControllerAddToCartResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/carts',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const cartsControllerRemoveFromCart = <ThrowOnError extends boolean = false>(options: Options<CartsControllerRemoveFromCartData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<CartsControllerRemoveFromCartResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/carts/{courseId}',
        ...options
    });
};

export const paymentsControllerVerifyPayment = <ThrowOnError extends boolean = false>(options: Options<PaymentsControllerVerifyPaymentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PaymentsControllerVerifyPaymentResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/payments/verify',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const paymentsControllerHandleWebhook = <ThrowOnError extends boolean = false>(options: Options<PaymentsControllerHandleWebhookData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PaymentsControllerHandleWebhookResponses, unknown, ThrowOnError>({
        url: '/payments/webhook',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};